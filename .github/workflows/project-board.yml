name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed, converted_to_draft, ready_for_review]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - name: Move to Project Board
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/orgs/AICryptopia/projects/1
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Project Status and Labels
        uses: actions/github-script@v7
        with:
          script: |
            const updateIssueStatus = async () => {
              // Status mapping based on event type and action
              let newStatus;
              if (context.eventName === 'issues') {
                switch (context.payload.action) {
                  case 'opened':
                  case 'reopened':
                    newStatus = '📋 Backlog';
                    break;
                  case 'closed':
                    newStatus = '✅ Done';
                    break;
                }
              } else if (context.eventName === 'pull_request') {
                switch (context.payload.action) {
                  case 'opened':
                  case 'reopened':
                    newStatus = '🚧 In Progress';
                    break;
                  case 'ready_for_review':
                    newStatus = '👀 In Review';
                    break;
                  case 'closed':
                    if (context.payload.pull_request.merged) {
                      newStatus = '✅ Done';
                    }
                    break;
                }
              }
              
              if (newStatus) {
                // Update the status using GitHub's REST API
                const item = context.payload.issue || context.payload.pull_request;
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: item.number,
                  state: newStatus.includes('Done') ? 'closed' : 'open'
                });
              }
            };

            const addLabels = async () => {
              if (context.eventName === 'issues' && context.payload.action === 'opened') {
                const issue = context.payload.issue;
                const title = issue.title.toLowerCase();
                const body = issue.body ? issue.body.toLowerCase() : '';
                const labels = [];

                // Type Labels based on title prefix
                if (title.startsWith('[feature]')) {
                  labels.push('✨ Type: Feature');
                } else if (title.startsWith('[bug]')) {
                  labels.push('🐛 Type: Bug');
                } else if (title.startsWith('[docs]')) {
                  labels.push('📚 Type: Documentation');
                } else if (title.startsWith('[maintenance]')) {
                  labels.push('🔧 Type: Maintenance');
                }

                // Priority Labels based on title or body
                if (title.includes('[high]') || body.includes('priority: high')) {
                  labels.push('🔥 Priority: High');
                } else if (title.includes('[medium]') || body.includes('priority: medium')) {
                  labels.push('⏰ Priority: Medium');
                } else {
                  labels.push('📅 Priority: Low'); // Default priority
                }

                // Add BUILD label by default
                labels.push('BUILD');

                if (labels.length > 0) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: labels
                  });
                }
              }
            };
            
            await updateIssueStatus();
            await addLabels(); 